# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: R

on:
  push:
    paths:
      - '.github/workflows/r.yml'
      - 'ci/scripts/r_*.sh'
      - 'ci/scripts/cpp_*.sh'
      - 'ci/scripts/PKGBUILD'
      - 'ci/etc/rprofile'
      - 'ci/docker/**'
      - 'cpp/**'
      - 'r/**'
  pull_request:
    paths:
      - '.github/workflows/r.yml'
      - 'ci/scripts/r_*.sh'
      - 'ci/scripts/cpp_*.sh'
      - 'ci/scripts/PKGBUILD'
      - 'ci/etc/rprofile'
      - 'ci/docker/**'
      - 'cpp/**'
      - 'r/**'

env:
  DOCKER_BUILDKIT: 0
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  ubuntu:
    name: AMD64 Ubuntu ${{ matrix.ubuntu }} R ${{ matrix.r }}
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
    strategy:
      fail-fast: false
      matrix:
        r: [3.6]
        ubuntu: [18.04]
    env:
      R: ${{ matrix.r }}
      UBUNTU: ${{ matrix.ubuntu }}
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Fetch Submodules and Tags
        shell: bash
        run: ci/scripts/util_checkout.sh
      - name: Docker Pull
        shell: bash
        run: |
          docker-compose pull --ignore-pull-failures ubuntu-cpp
          docker-compose pull --ignore-pull-failures ubuntu-r
      - name: Docker Build
        shell: bash
        run: |
          docker-compose build ubuntu-cpp
          docker-compose build ubuntu-r
      - name: Docker Run
        shell: bash
        run: docker-compose run ubuntu-r
      - name: Dump install logs on failure
        if: failure()
        run: cat r/check/arrow.Rcheck/00install.out
      - name: Docker Push
        if: success() && github.event_name == 'push' && github.repository == 'apache/arrow'
        continue-on-error: true
        shell: bash
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USER }} \
                       -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker-compose push ubuntu-r

  rstudio:
    name: "rstudio/r-base:${{ matrix.r_version }}-${{ matrix.r_image }}"
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
    strategy:
      fail-fast: false
      matrix:
        # See https://hub.docker.com/r/rstudio/r-base
        r_version: ["3.6"]
        r_image:
          - centos7
    env:
      R_ORG: "rstudio"
      R_IMAGE: "r-base"
      R_TAG: ${{ matrix.r_version }}-${{ matrix.r_image }}
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Fetch Submodules and Tags
        shell: bash
        run: ci/scripts/util_checkout.sh
      - name: Docker Pull
        shell: bash
        run: docker-compose pull --ignore-pull-failures r
      - name: Docker Build
        shell: bash
        run: docker-compose build r
      - name: Docker Run
        shell: bash
        run: docker-compose run r
      - name: Dump install logs on failure
        if: failure()
        run: cat r/check/arrow.Rcheck/00install.out
      - name: Docker Push
        if: success() && github.event_name == 'push' && github.repository == 'apache/arrow'
        continue-on-error: true
        shell: bash
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USER }} \
                       -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker-compose push r

  windows:
    name: AMD64 Windows RTools ${{ matrix.rtools }}
    runs-on: windows-latest
    if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
    strategy:
      fail-fast: false
      matrix:
        # TODO: test on rtools40
        rtools: [35]
    env:
      TEST_R_WITH_ARROW: "TRUE"
      ARROW_R_CXXFLAGS: '-Werror'
      _R_CHECK_TESTS_NLINES_: 0
    steps:
      - run: git config --global core.autocrlf false
      - uses: numworks/setup-msys2@v1
        with:
          update: true
      - name: Checkout Arrow
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Make R tests verbose
        shell: cmd
        run: |
          cd r/tests
          sed -i.bak -E -e 's/"arrow"/"arrow", reporter = "location"/' testthat.R
          rm -f testthat.R.bak
      - name: Fetch Submodules and Tags
        shell: bash
        run: ci/scripts/util_checkout.sh
      - uses: r-lib/actions/setup-r@master
        with:
          rtools-version: ${{ matrix.rtools }}
      - name: Build Arrow C++
        run: msys2do ci/scripts/r_windows_build.sh
      - uses: actions/upload-artifact@v1
        with:
          name: Rtools Arrow C++
          path: libarrow.zip
      - name: Install R package dependencies
        shell: Rscript {0}
        run: |
          options(pkgType="win.binary")
          install.packages(c("remotes", "rcmdcheck"))
          remotes::install_deps("r", dependencies = TRUE)
      - name: Check
        shell: Rscript {0}
        run: |
          Sys.setenv(
            RWINLIB_LOCAL = file.path(Sys.getenv("GITHUB_WORKSPACE"), "libarrow.zip"),
            MAKEFLAGS = paste0("-j", parallel::detectCores())
          )
          rcmdcheck::rcmdcheck("r",
            build_args = '--no-build-vignettes',
            args = c('--no-manual', '--as-cran', '--ignore-vignettes', '--run-donttest'),
            error_on = 'warning',
            check_dir = 'check'
          )
