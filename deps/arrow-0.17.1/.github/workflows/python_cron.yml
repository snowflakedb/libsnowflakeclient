# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Python Cron

on:
  push:
    paths:
      - '.github/workflows/python_cron.yml'
  pull_request:
    paths:
      - '.github/workflows/python_cron.yml'
  schedule:
    - cron: |
        0 */12 * * *

env:
  DOCKER_BUILDKIT: 0
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:

  debian:
    name: AMD64 Debian ${{ matrix.debian }} Python 3
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
    strategy:
      fail-fast: false
      matrix:
        debian: [10]
    env:
      DEBIAN: ${{ matrix.debian }}
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Fetch Submodules and Tags
        shell: bash
        run: ci/scripts/util_checkout.sh
      - name: Docker Pull
        shell: bash
        run: |
          docker-compose pull --ignore-pull-failures debian-cpp
          docker-compose pull --ignore-pull-failures debian-python
      - name: Docker Build
        shell: bash
        run: |
          docker-compose build debian-cpp
          docker-compose build debian-python
      - name: Docker Run
        shell: bash
        run: docker-compose run debian-python
      - name: Docker Push
        if: success() && github.repository == 'apache/arrow'
        continue-on-error: true
        shell: bash
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USER }} \
                       -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker-compose push debian-python

  ubuntu:
    name: AMD64 Ubuntu ${{ matrix.ubuntu }} Python 3
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
    strategy:
      fail-fast: false
      matrix:
        ubuntu: [18.04]
    env:
      UBUNTU: ${{ matrix.ubuntu }}
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Fetch Submodules and Tags
        shell: bash
        run: ci/scripts/util_checkout.sh
      - name: Docker Pull
        shell: bash
        run: |
          docker-compose pull --ignore-pull-failures ubuntu-cpp
          docker-compose pull --ignore-pull-failures ubuntu-python
      - name: Docker Build
        shell: bash
        run: |
          docker-compose build ubuntu-cpp
          docker-compose build ubuntu-python
      - name: Docker Run
        shell: bash
        run: docker-compose run ubuntu-python
      - name: Docker Push
        if: success() && github.repository == 'apache/arrow'
        continue-on-error: true
        shell: bash
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USER }} \
                       -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker-compose push ubuntu-python

  fedora:
    name: AMD64 Fedora ${{ matrix.fedora }} Python 3
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
    strategy:
      fail-fast: false
      matrix:
        fedora: [30]
    env:
      FEDORA: ${{ matrix.fedora }}
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Fetch Submodules and Tags
        shell: bash
        run: ci/scripts/util_checkout.sh
      - name: Docker Pull
        shell: bash
        run: |
          docker-compose pull --ignore-pull-failures fedora-cpp
          docker-compose pull --ignore-pull-failures fedora-python
      - name: Docker Build
        shell: bash
        run: |
          docker-compose build fedora-cpp
          docker-compose build fedora-python
      - name: Docker Run
        shell: bash
        run: docker-compose run fedora-python
      - name: Docker Push
        if: success() && github.repository == 'apache/arrow'
        continue-on-error: true
        shell: bash
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USER }} \
                       -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker-compose push fedora-python

  downstream:
    name: AMD64 Conda Python 3.7 ${{ matrix.title }}
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
    strategy:
      fail-fast: false
      matrix:
        name:
          - dask-latest
          - hdfs-2.9.2
          - turbodbc-latest
          - kartothek-latest
          - pandas-master
          - pandas-0.24
        include:
          - name: dask-latest
            library: dask
            dask: latest
            title: Dask latest
          - name: turbodbc-latest
            library: turbodbc
            turbodbc: latest
            title: Turbodbc latest
          - name: kartothek-latest
            library: kartothek
            kartothek: latest
            title: Kartothek latest
          - name: pandas-0.24
            library: pandas
            title: Pandas 0.24
            pandas: 0.24
          - name: pandas-master
            library: pandas
            title: Pandas master
            pandas: master
          - name: hdfs-2.9.2
            library: hdfs
            hdfs: 2.9.2
            title: HDFS 2.9.2
    env:
      # the defaults here should correspond to the values in .env
      PYTHON: 3.7
      HDFS: ${{ matrix.hdfs || '2.9.2' }}
      DASK: ${{ matrix.dask || 'latest' }}
      TURBODBC: ${{ matrix.turbodbc || 'latest' }}
      PANDAS: ${{ matrix.pandas || 'latest' }}
      KARTOTHEK: ${{ matrix.kartothek || 'latest' }}
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Fetch Submodules and Tags
        shell: bash
        run: ci/scripts/util_checkout.sh
      - name: Docker Pull
        shell: bash
        run: |
          docker-compose pull --ignore-pull-failures conda-cpp
          docker-compose pull --ignore-pull-failures conda-python
          docker-compose pull --ignore-pull-failures conda-python-${{ matrix.library }}
      - name: Docker Build
        shell: bash
        run: |
          docker-compose build conda-cpp
          docker-compose build conda-python
          docker-compose build conda-python-${{ matrix.library }}
      - name: Docker Run
        shell: bash
        run: |
          docker-compose run conda-python-${{ matrix.library }}
      - name: Docker Push
        if: success() && github.repository == 'apache/arrow'
        continue-on-error: true
        shell: bash
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USER }} \
                       -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker-compose push conda-python-${{ matrix.library }}
